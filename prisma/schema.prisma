// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
  IS_USER_UPDATE_DATA
}

enum RoleName {
  ADMIN
  CASHIER
  WAITER
  KITCHEN_MANAGER
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  NEEDS_CLEANING
}

enum OrderStatus {
  PENDING
  SENT_TO_CASHIER
  PAID
  CANCELLED
  IN_KITCHEN
  READY
  DELIVERED
}

enum OrderType {
  DINE_IN
  TAKE_OUT
  DELIVERY
  WHATSAPP
}

enum PaymentMethod {
  CASH
  NEQUI
  TICKET_BOOK
}

// DATA-MODELS

model Token {
  id          String    @id @default(uuid())
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
}

model Role {
  id          Int      @id @default(autoincrement())
  name        RoleName @unique
  description String?

  permissions RolePermission[]
  users       UserRole[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  deleted   Boolean   @default(false)
  deletedAt DateTime? @map("deleted_at")

  @@map("roles")
}

model Permission {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?

  roles RolePermission[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  deleted   Boolean   @default(false)
  deletedAt DateTime? @map("deleted_at")

  @@map("permissions")
}

model RolePermission {
  roleId Int  @map("role_id")
  role   Role @relation(fields: [roleId], references: [id])

  permissionId Int        @map("permission_id")
  permission   Permission @relation(fields: [permissionId], references: [id])

  assignedAt DateTime @default(now()) @map("assigned_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model User {
  id       String  @id @default(uuid())
  name     String
  email    String  @unique
  phone    String? @unique
  password String

  roles UserRole[]

  profile Profile?

  token Token[]

  ordersTaken        Order[]   @relation("OrdersTakenByWaiter")
  registeredExpenses Expense[] @relation("ExpensesRecordedBy")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  deleted   Boolean   @default(false)
  deletedAt DateTime? @map("deleted_at")

  @@map("users")
}

model UserRole {
  roleId Int  @map("role_id")
  role   Role @relation(fields: [roleId], references: [id])

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  assignedAt DateTime @default(now()) @map("assigned_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([roleId, userId])
  @@map("user_roles")
}

model Profile {
  id     String @id @default(uuid())
  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  photoUrl       String?   @map("photo_url")
  birthDate      DateTime? @map("birthDate")
  identification String?
  address        String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  deleted   Boolean   @default(false)
  deletedAt DateTime? @map("deleted_at")

  @@map("profiles")
}

model Table {
  id       Int         @id @default(autoincrement())
  number   String      @unique
  status   TableStatus @default(AVAILABLE)
  location String?

  orders Order[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  deleted   Boolean   @default(false)
  deletedAt DateTime? @map("deleted_at")

  @@map("tables")
}

model MenuCategory {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  order       Int     @default(0)

  items MenuItem[]

  deleted   Boolean   @default(false)
  deletedAt DateTime? @map("deleted_at")

  @@map("menu_categories")
}

model MenuItem {
  id         Int          @id @default(autoincrement())
  categoryId Int          @map("category_id")
  category   MenuCategory @relation(fields: [categoryId], references: [id])

  name        String
  description String?
  price       Decimal @db.Decimal(10, 2)
  isExtra     Boolean @default(false) @map("is_extra")
  isAvailable Boolean @default(true) @map("is_available")
  imageUrl    String? @map("image_url")

  // Relaciones inversas para saber d√≥nde se usa este items
  dailyMenuOptions DailyMenuOption[]
  orderItems       OrderItem[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  deleted   Boolean   @default(false)
  deletedAt DateTime? @map("deleted_at")

  @@unique([categoryId, name])
  @@map("menu_items")
}

model DailyMenuOption {
  id   Int      @id @default(autoincrement())
  date DateTime @db.Date

  menuItemId Int      @map("menu_item_id")
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])

  optionType String @map("option_type")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([date, optionType])
  @@map("daily_menu_options")
}

model Order {
  id      String @id @default(uuid())
  tableId Int?   @map("table_id")
  table   Table? @relation(fields: [tableId], references: [id])

  waiterId String @map("waiter_id")
  waiter   User   @relation("OrdersTakenByWaiter", fields: [waiterId], references: [id])

  costumerId String?   @map("costumer_id")
  costumer   Costumer? @relation(fields: [costumerId], references: [id])

  status OrderStatus @default(PENDING)
  type   OrderType   @default(DINE_IN)

  totalAmount Decimal @default(0.00) @map("total_amount") @db.Decimal(10, 2)
  notes       String?

  whatsappOrderId String? @unique @map("whatsapp_order_id")

  items    OrderItem[]
  payments Payment[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("orders")
}

model OrderItem {
  id      Int    @id @default(autoincrement())
  orderId String @map("order_id")
  order   Order  @relation(fields: [orderId], references: [id])

  menuItemId Int?      @map("menu_item_id")
  menuItem   MenuItem? @relation(fields: [menuItemId], references: [id])

  quantity     Int
  priceAtOrder Decimal @map("price_at_order") @db.Decimal(10, 2)
  notes        String?

  isFreeSubstitution Boolean @default(false) @map("is_free_substitution")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("order_items")
}

model Costumer {
  id    String  @id @default(uuid())
  name  String
  phone String  @unique
  email String?

  orders      Order[]
  ticketBooks TicketBook[]
  dailyCodes  DailyTicketBookCode[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  deleted   Boolean   @default(false)
  deletedAt DateTime? @map("deleted_at")

  @@map("costumers")
}

model TicketBook {
  id String @id @default(uuid())

  costumerId String?   @map("costumer_id")
  costumer   Costumer? @relation(fields: [costumerId], references: [id])

  purchaseDate     DateTime @default(now()) @map("purchase_date")
  expiryDate       DateTime @map("expiry_date")
  totalPortions    Int      @map("total_portions")
  consumedPortions Int      @default(0) @map("consumed_portions")

  status String @default("active")

  usages TicketBookUsage[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("ticket_books")
}

model TicketBookUsage {
  id           String     @id @default(uuid())
  ticketBookId String     @map("ticket_book_id")
  ticketBook   TicketBook @relation(fields: [ticketBookId], references: [id])

  paymentId String  @map("payment_id")
  payments  Payment @relation("TicketUsages", fields: [paymentId], references: [id])

  dailyCodeId String              @map("daily_code_id")
  dailyCode   DailyTicketBookCode @relation(fields: [dailyCodeId], references: [id])

  portionCount Int @default(1) @map("portion_count")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("ticket_book_usages")
}

model Payment {
  id String @id @default(uuid())

  orderId String? @map("order_id")
  order   Order?  @relation(fields: [orderId], references: [id])

  method PaymentMethod @default(CASH)
  amount Decimal       @db.Decimal(10, 2)

  transactionRef String? @map("transaction_ref")

  ticketUsages          TicketBookUsage[]    @relation("TicketUsages")
  dailyTicketBookCodeId String?              @unique @map("daily_ticket_book_code_id")
  dailyTicketBookCode   DailyTicketBookCode? @relation("CodeUsedInPayment", fields: [dailyTicketBookCodeId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")

  @@map("payments")
}

model ExpenseCategory {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  expenses Expense[]

  @@map("expense_categories")
}

model Expense {
  id Int @id @default(autoincrement())

  recordedById String @map("recorded_by_id")
  recordedBy   User   @relation("ExpensesRecordedBy", fields: [recordedById], references: [id])

  categoryId Int             @map("category_id")
  category   ExpenseCategory @relation(fields: [categoryId], references: [id])

  date        DateTime
  amount      Decimal  @db.Decimal(10, 2)
  description String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  deleted   Boolean   @default(false)
  deletedAt DateTime? @map("deleted_at")

  @@map("expenses")
}

model DailyTicketBookCode {
  id String @id @default(uuid())

  costumerId String?   @map("costumer_id")
  costumer   Costumer? @relation(fields: [costumerId], references: [id])

  code String   @unique
  date DateTime @db.Date

  isUsed Boolean @default(false) @map("is_used")

  usedAtPaymentId Int?              @unique @map("used_at_payment_id")
  usedAtPayment   Payment?          @relation("CodeUsedInPayment")
  ticketBookUsage TicketBookUsage[]

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([costumerId, date])
  @@map("daily_ticket_book_codes")
}
